{"ast":null,"code":"export const fetchUserSuccess = user => {\n  return {\n    type: 'FETCH_USER_SUCCESS',\n    user\n  };\n};\nexport const fetchUserError = () => {\n  return {\n    type: 'FETCH_USER_ERROR'\n  };\n};\nexport const fetchUser = accessToken => {\n  return dispatch => {\n    const request = new Request('https://api.spotify.com/v1/me', {\n      headers: new Headers({\n        'Authorization': 'Bearer ' + accessToken\n      })\n    });\n    fetch(request).then(res => {\n      // send user back to homepage if no token\n      if (res.statusText === \"Unauthorized\") {\n        window.location.href = './';\n      }\n\n      return res.json();\n    }).then(res => {\n      dispatch(fetchUserSuccess(res));\n    }).catch(err => {\n      dispatch(fetchUserError(err));\n    });\n  };\n};\nexport const addSongToLibrarySuccess = songId => {\n  return {\n    type: 'ADD_SONG_TO_LIBRARY_SUCCESS',\n    songId\n  };\n};\nexport const addSongToLibraryError = () => {\n  return {\n    type: 'ADD_SONG_TO_LIBRARY_ERROR'\n  };\n};\nexport const addSongToLibrary = (accessToken, id) => {\n  return dispatch => {\n    const request = new Request(`https://api.spotify.com/v1/me/tracks?ids=${id}`, {\n      method: 'PUT',\n      headers: new Headers({\n        'Authorization': 'Bearer ' + accessToken\n      })\n    });\n    fetch(request).then(res => {\n      if (res.ok) {\n        dispatch(addSongToLibrarySuccess(id));\n      }\n    }).catch(err => {\n      dispatch(addSongToLibraryError(err));\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Akshat Bhatia/Desktop/MiniProject/frontend/src/actions/userActions.js"],"names":["fetchUserSuccess","user","type","fetchUserError","fetchUser","accessToken","dispatch","request","Request","headers","Headers","fetch","then","res","statusText","window","location","href","json","catch","err","addSongToLibrarySuccess","songId","addSongToLibraryError","addSongToLibrary","id","method","ok"],"mappings":"AAAA,OAAO,MAAMA,gBAAgB,GAAIC,IAAD,IAAU;AACxC,SAAO;AACLC,IAAAA,IAAI,EAAE,oBADD;AAELD,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAME,cAAc,GAAG,MAAM;AAClC,SAAO;AACLD,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,MAAME,SAAS,GAAIC,WAAD,IAAiB;AAExC,SAAOC,QAAQ,IAAI;AACjB,UAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,+BAAZ,EAA6C;AAC3DC,MAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AACnB,yBAAiB,YAAYL;AADV,OAAZ;AADkD,KAA7C,CAAhB;AAMAM,IAAAA,KAAK,CAACJ,OAAD,CAAL,CAAeK,IAAf,CAAoBC,GAAG,IAAI;AACzB;AACA,UAAGA,GAAG,CAACC,UAAJ,KAAmB,cAAtB,EAAsC;AACpCC,QAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,IAAvB;AACD;;AACD,aAAOJ,GAAG,CAACK,IAAJ,EAAP;AACD,KAND,EAMGN,IANH,CAMQC,GAAG,IAAI;AACbP,MAAAA,QAAQ,CAACN,gBAAgB,CAACa,GAAD,CAAjB,CAAR;AACD,KARD,EAQGM,KARH,CAQSC,GAAG,IAAI;AACdd,MAAAA,QAAQ,CAACH,cAAc,CAACiB,GAAD,CAAf,CAAR;AACD,KAVD;AAWD,GAlBD;AAmBD,CArBM;AAuBP,OAAO,MAAMC,uBAAuB,GAAIC,MAAD,IAAY;AACjD,SAAO;AACLpB,IAAAA,IAAI,EAAE,6BADD;AAELoB,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAMC,qBAAqB,GAAG,MAAM;AACzC,SAAO;AACLrB,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMsB,gBAAgB,GAAG,CAACnB,WAAD,EAAcoB,EAAd,KAAqB;AAEnD,SAAOnB,QAAQ,IAAI;AAEjB,UAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAa,4CAA2CiB,EAAG,EAA3D,EAA8D;AAC5EC,MAAAA,MAAM,EAAE,KADoE;AAE5EjB,MAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AACnB,yBAAiB,YAAYL;AADV,OAAZ;AAFmE,KAA9D,CAAhB;AAOAM,IAAAA,KAAK,CAACJ,OAAD,CAAL,CAAeK,IAAf,CAAoBC,GAAG,IAAI;AACzB,UAAGA,GAAG,CAACc,EAAP,EAAW;AACTrB,QAAAA,QAAQ,CAACe,uBAAuB,CAACI,EAAD,CAAxB,CAAR;AACD;AACF,KAJD,EAIGN,KAJH,CAISC,GAAG,IAAI;AACdd,MAAAA,QAAQ,CAACiB,qBAAqB,CAACH,GAAD,CAAtB,CAAR;AACD,KAND;AAOD,GAhBD;AAiBD,CAnBM","sourcesContent":["export const fetchUserSuccess = (user) => {\r\n  return {\r\n    type: 'FETCH_USER_SUCCESS',\r\n    user\r\n  };\r\n};\r\n\r\nexport const fetchUserError = () => {\r\n  return {\r\n    type: 'FETCH_USER_ERROR'\r\n  };\r\n};\r\n\r\nexport const fetchUser = (accessToken) => {\r\n\r\n  return dispatch => {\r\n    const request = new Request('https://api.spotify.com/v1/me', {\r\n      headers: new Headers({\r\n        'Authorization': 'Bearer ' + accessToken\r\n      })\r\n    });\r\n\r\n    fetch(request).then(res => {\r\n      // send user back to homepage if no token\r\n      if(res.statusText === \"Unauthorized\") {\r\n        window.location.href = './';\r\n      }\r\n      return res.json();\r\n    }).then(res => {\r\n      dispatch(fetchUserSuccess(res));\r\n    }).catch(err => {\r\n      dispatch(fetchUserError(err));\r\n    });\r\n  };\r\n};\r\n\r\nexport const addSongToLibrarySuccess = (songId) => {\r\n  return {\r\n    type: 'ADD_SONG_TO_LIBRARY_SUCCESS',\r\n    songId\r\n  };\r\n};\r\n\r\nexport const addSongToLibraryError = () => {\r\n  return {\r\n    type: 'ADD_SONG_TO_LIBRARY_ERROR'\r\n  };\r\n};\r\n\r\nexport const addSongToLibrary = (accessToken, id) => {\r\n\r\n  return dispatch => {\r\n\r\n    const request = new Request(`https://api.spotify.com/v1/me/tracks?ids=${id}`, {\r\n      method: 'PUT',\r\n      headers: new Headers({\r\n        'Authorization': 'Bearer ' + accessToken\r\n      })\r\n    });\r\n\r\n    fetch(request).then(res => {\r\n      if(res.ok) {\r\n        dispatch(addSongToLibrarySuccess(id));\r\n      }\r\n    }).catch(err => {\r\n      dispatch(addSongToLibraryError(err));\r\n    });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}