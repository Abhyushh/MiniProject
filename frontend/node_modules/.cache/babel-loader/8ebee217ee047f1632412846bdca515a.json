{"ast":null,"code":"export const fetchArtistsPending = () => {\n  return {\n    type: 'FETCH_ARTISTS_PENDING'\n  };\n};\nexport const fetchArtistsSuccess = artists => {\n  return {\n    type: 'FETCH_ARTISTS_SUCCESS',\n    artists\n  };\n};\nexport const fetchArtistsError = () => {\n  return {\n    type: 'FETCH_ARTISTS_ERROR'\n  };\n};\nexport const fetchArtists = (accessToken, artistIds) => {\n  return dispatch => {\n    const request = new Request(`https://api.spotify.com/v1/artists?ids=${artistIds}`, {\n      headers: new Headers({\n        'Authorization': 'Bearer ' + accessToken\n      })\n    });\n    dispatch(fetchArtistsPending());\n    fetch(request).then(res => {\n      return res.json();\n    }).then(res => {\n      dispatch(fetchArtistsSuccess(res));\n    }).catch(err => {\n      dispatch(fetchArtistsError(err));\n    });\n  };\n};\nexport const fetchArtistSongsPending = () => {\n  return {\n    type: 'FETCH_ARTIST_SONGS_PENDING'\n  };\n};\nexport const fetchArtistSongsSuccess = songs => {\n  return {\n    type: 'FETCH_ARTIST_SONGS_SUCCESS',\n    songs\n  };\n};\nexport const fetchArtistSongsError = () => {\n  return {\n    type: 'FETCH_ARTIST_SONGS_ERROR'\n  };\n};\nexport const fetchArtistSongs = (artistId, accessToken) => {\n  return dispatch => {\n    const request = new Request(`https://api.spotify.com/v1/artists/${artistId}/top-tracks?country=US`, {\n      headers: new Headers({\n        'Authorization': 'Bearer ' + accessToken\n      })\n    });\n    dispatch(fetchArtistSongsPending());\n    fetch(request).then(res => {\n      if (res.statusText === \"Unauthorized\") {\n        window.location.href = './';\n      }\n\n      return res.json();\n    }).then(res => {\n      // map the response to match that returned from get song request\n      res.items = res.tracks.map(item => {\n        return {\n          track: item\n        };\n      });\n      dispatch(fetchArtistSongsSuccess(res.items));\n    }).catch(err => {\n      dispatch(fetchArtistSongsError(err));\n    });\n  };\n};\nexport const setArtistIds = artistIds => {\n  return {\n    type: 'SET_ARTIST_IDS',\n    artistIds\n  };\n};","map":{"version":3,"sources":["C:/Users/Akshat Bhatia/Desktop/MiniProject/frontend/src/actions/artistActions.js"],"names":["fetchArtistsPending","type","fetchArtistsSuccess","artists","fetchArtistsError","fetchArtists","accessToken","artistIds","dispatch","request","Request","headers","Headers","fetch","then","res","json","catch","err","fetchArtistSongsPending","fetchArtistSongsSuccess","songs","fetchArtistSongsError","fetchArtistSongs","artistId","statusText","window","location","href","items","tracks","map","item","track","setArtistIds"],"mappings":"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","sourcesContent":["export const fetchArtistsPending = () => {\r\n  return {\r\n    type: 'FETCH_ARTISTS_PENDING'\r\n  };\r\n};\r\n\r\nexport const fetchArtistsSuccess = (artists) => {\r\n  return {\r\n    type: 'FETCH_ARTISTS_SUCCESS',\r\n    artists\r\n  };\r\n};\r\n\r\nexport const fetchArtistsError = () => {\r\n  return {\r\n    type: 'FETCH_ARTISTS_ERROR'\r\n  };\r\n};\r\n\r\nexport const fetchArtists = (accessToken, artistIds) => {\r\n  return dispatch => {\r\n    const request = new Request(`https://api.spotify.com/v1/artists?ids=${artistIds}`, {\r\n      headers: new Headers({\r\n        'Authorization': 'Bearer ' + accessToken\r\n      })\r\n    });\r\n\r\n    dispatch(fetchArtistsPending());\r\n\r\n    fetch(request).then(res => {\r\n      return res.json();\r\n    }).then(res => {\r\n      dispatch(fetchArtistsSuccess(res));\r\n    }).catch(err => {\r\n      dispatch(fetchArtistsError(err));\r\n    });\r\n  };\r\n};\r\n\r\n\r\nexport const fetchArtistSongsPending = () => {\r\n  return {\r\n    type: 'FETCH_ARTIST_SONGS_PENDING'\r\n  };\r\n};\r\n\r\nexport const fetchArtistSongsSuccess = (songs) => {\r\n  return {\r\n    type: 'FETCH_ARTIST_SONGS_SUCCESS',\r\n    songs\r\n  };\r\n};\r\n\r\nexport const fetchArtistSongsError = () => {\r\n  return {\r\n    type: 'FETCH_ARTIST_SONGS_ERROR'\r\n  };\r\n};\r\n\r\nexport const fetchArtistSongs = (artistId, accessToken) => {\r\n  return dispatch => {\r\n    const request = new Request(`https://api.spotify.com/v1/artists/${artistId}/top-tracks?country=US`, {\r\n      headers: new Headers({\r\n        'Authorization': 'Bearer ' + accessToken\r\n      })\r\n    });\r\n\r\n    dispatch(fetchArtistSongsPending());\r\n\r\n    fetch(request).then(res => {\r\n      if(res.statusText === \"Unauthorized\") {\r\n        window.location.href = './';\r\n      }\r\n      return res.json();\r\n    }).then(res => {\r\n      // map the response to match that returned from get song request\r\n      res.items = res.tracks.map(item => {\r\n        return {\r\n          track: item\r\n        };\r\n      });\r\n\r\n      dispatch(fetchArtistSongsSuccess(res.items));\r\n    }).catch(err => {\r\n      dispatch(fetchArtistSongsError(err));\r\n    });\r\n  };\r\n};\r\n\r\n\r\nexport const setArtistIds = (artistIds) => {\r\n  return {\r\n    type: 'SET_ARTIST_IDS',\r\n    artistIds\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}