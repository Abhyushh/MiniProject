{"ast":null,"code":"import uniqBy from 'lodash/uniqBy';\nimport { setArtistIds } from './artistActions';\nexport const fetchSongsPending = () => {\n  return {\n    type: 'FETCH_SONGS_PENDING'\n  };\n};\nexport const fetchSongsSuccess = songs => {\n  return {\n    type: 'FETCH_SONGS_SUCCESS',\n    songs\n  };\n};\nexport const fetchSongsError = () => {\n  return {\n    type: 'FETCH_SONGS_ERROR'\n  };\n};\nexport const fetchSongs = accessToken => {\n  return dispatch => {\n    const request = new Request(`https://api.spotify.com/v1/me/tracks?limit=50`, {\n      headers: new Headers({\n        'Authorization': 'Bearer ' + accessToken\n      })\n    });\n    dispatch(fetchSongsPending());\n    fetch(request).then(res => {\n      if (res.statusText === \"Unauthorized\") {\n        window.location.href = './';\n      }\n\n      return res.json();\n    }).then(res => {\n      // get all artist ids and remove duplicates\n      let artistIds = uniqBy(res.items, item => {\n        return item.track.artists[0].name;\n      }).map(item => {\n        return item.track.artists[0].id;\n      }).join(',');\n      dispatch(setArtistIds(artistIds));\n      dispatch(fetchSongsSuccess(res.items));\n    }).catch(err => {\n      dispatch(fetchSongsError(err));\n    });\n  };\n};\nexport const searchSongsPending = () => {\n  return {\n    type: 'SEARCH_SONGS_PENDING'\n  };\n};\nexport const searchSongsSuccess = songs => {\n  return {\n    type: 'SEARCH_SONGS_SUCCESS',\n    songs\n  };\n};\nexport const searchSongsError = () => {\n  return {\n    type: 'SEARCH_SONGS_ERROR'\n  };\n};\nexport const searchSongs = (searchTerm, accessToken) => {\n  return dispatch => {\n    const request = new Request(`https://api.spotify.com/v1/search?q=${searchTerm}&type=track`, {\n      headers: new Headers({\n        'Authorization': 'Bearer ' + accessToken,\n        'Accept': 'application/json'\n      })\n    });\n    dispatch(searchSongsPending());\n    fetch(request).then(res => {\n      if (res.statusText === \"Unauthorized\") {\n        window.location.href = './';\n      }\n\n      return res.json();\n    }).then(res => {\n      res.items = res.tracks.items.map(item => {\n        return {\n          track: item\n        };\n      });\n      dispatch(searchSongsSuccess(res.items));\n    }).catch(err => {\n      dispatch(fetchSongsError(err));\n    });\n  };\n};\nexport const fetchRecentlyPlayedPending = () => {\n  return {\n    type: 'FETCH_RECENTLY_PLAYED_PENDING'\n  };\n};\nexport const fetchRecentlyPlayedSuccess = songs => {\n  return {\n    type: 'FETCH_RECENTLY_PLAYED_SUCCESS',\n    songs\n  };\n};\nexport const fetchRecentlyPlayedError = () => {\n  return {\n    type: 'FETCH_RECENTLY_PLAYED_ERROR'\n  };\n};\nexport const fetchRecentlyPlayed = accessToken => {\n  return dispatch => {\n    const request = new Request(`https://api.spotify.com/v1/me/player/recently-played`, {\n      headers: new Headers({\n        'Authorization': 'Bearer ' + accessToken\n      })\n    });\n    dispatch(fetchRecentlyPlayedPending());\n    fetch(request).then(res => {\n      return res.json();\n    }).then(res => {\n      //remove duplicates from recently played\n      res.items = uniqBy(res.items, item => {\n        return item.track.id;\n      });\n      dispatch(fetchRecentlyPlayedSuccess(res.items));\n    }).catch(err => {\n      dispatch(fetchRecentlyPlayedError(err));\n    });\n  };\n};\nexport const playSong = song => {\n  return {\n    type: 'PLAY_SONG',\n    song\n  };\n};\nexport const stopSong = () => {\n  return {\n    type: 'STOP_SONG'\n  };\n};\nexport const pauseSong = () => {\n  return {\n    type: 'PAUSE_SONG'\n  };\n};\nexport const resumeSong = () => {\n  return {\n    type: 'RESUME_SONG'\n  };\n};\nexport const increaseSongTime = time => {\n  return {\n    type: 'INCREASE_SONG_TIME',\n    time\n  };\n};\nexport const updateViewType = view => {\n  return {\n    type: 'UPDATE_VIEW_TYPE',\n    view\n  };\n};","map":{"version":3,"sources":["C:/Users/Akshat Bhatia/Desktop/MiniProject/frontend/src/actions/songActions.js"],"names":["uniqBy","setArtistIds","fetchSongsPending","type","fetchSongsSuccess","songs","fetchSongsError","fetchSongs","accessToken","dispatch","request","Request","headers","Headers","fetch","then","res","statusText","window","location","href","json","artistIds","items","item","track","artists","name","map","id","join","catch","err","searchSongsPending","searchSongsSuccess","searchSongsError","searchSongs","searchTerm","tracks","fetchRecentlyPlayedPending","fetchRecentlyPlayedSuccess","fetchRecentlyPlayedError","fetchRecentlyPlayed","playSong","song","stopSong","pauseSong","resumeSong","increaseSongTime","time","updateViewType","view"],"mappings":"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","sourcesContent":["import uniqBy from 'lodash/uniqBy';\r\nimport { setArtistIds } from './artistActions';\r\n\r\nexport const fetchSongsPending = () => {\r\n  return {\r\n    type: 'FETCH_SONGS_PENDING'\r\n  };\r\n};\r\n\r\nexport const fetchSongsSuccess = (songs) => {\r\n  return {\r\n    type: 'FETCH_SONGS_SUCCESS',\r\n    songs\r\n  };\r\n};\r\n\r\nexport const fetchSongsError = () => {\r\n  return {\r\n    type: 'FETCH_SONGS_ERROR'\r\n  };\r\n};\r\n\r\nexport const fetchSongs = (accessToken) => {\r\n  return dispatch => {\r\n    const request = new Request(`https://api.spotify.com/v1/me/tracks?limit=50`, {\r\n      headers: new Headers({\r\n        'Authorization': 'Bearer ' + accessToken\r\n      })\r\n    });\r\n\r\n    dispatch(fetchSongsPending());\r\n\r\n    fetch(request).then(res => {\r\n      if(res.statusText === \"Unauthorized\") {\r\n        window.location.href = './';\r\n      }\r\n      return res.json();\r\n    }).then(res => {\r\n      // get all artist ids and remove duplicates\r\n      let artistIds = uniqBy(res.items, (item) => {\r\n        return item.track.artists[0].name;\r\n      }).map(item => {\r\n        return item.track.artists[0].id;\r\n      }).join(',');\r\n\r\n      dispatch(setArtistIds(artistIds));\r\n\r\n      dispatch(fetchSongsSuccess(res.items));\r\n    }).catch(err => {\r\n      dispatch(fetchSongsError(err));\r\n    });\r\n  };\r\n};\r\n\r\nexport const searchSongsPending = () => {\r\n  return {\r\n    type: 'SEARCH_SONGS_PENDING'\r\n  };\r\n};\r\n\r\nexport const searchSongsSuccess = (songs) => {\r\n  return {\r\n    type: 'SEARCH_SONGS_SUCCESS',\r\n    songs\r\n  };\r\n};\r\n\r\nexport const searchSongsError = () => {\r\n  return {\r\n    type: 'SEARCH_SONGS_ERROR'\r\n  };\r\n};\r\n\r\nexport const searchSongs = (searchTerm, accessToken) => {\r\n  return dispatch => {\r\n    const request = new Request(`https://api.spotify.com/v1/search?q=${searchTerm}&type=track`, {\r\n      headers: new Headers({\r\n        'Authorization': 'Bearer ' + accessToken,\r\n        'Accept': 'application/json'\r\n      })\r\n    });\r\n\r\n    dispatch(searchSongsPending());\r\n\r\n    fetch(request).then(res => {\r\n      if(res.statusText === \"Unauthorized\") {\r\n        window.location.href = './';\r\n      }\r\n      return res.json();\r\n    }).then(res => {\r\n      res.items = res.tracks.items.map(item => {\r\n        return {\r\n          track: item\r\n        };\r\n      });\r\n      dispatch(searchSongsSuccess(res.items));\r\n    }).catch(err => {\r\n      dispatch(fetchSongsError(err));\r\n    });\r\n  };\r\n};\r\n\r\nexport const fetchRecentlyPlayedPending = () => {\r\n  return {\r\n    type: 'FETCH_RECENTLY_PLAYED_PENDING'\r\n  };\r\n};\r\n\r\nexport const fetchRecentlyPlayedSuccess = (songs) => {\r\n  return {\r\n    type: 'FETCH_RECENTLY_PLAYED_SUCCESS',\r\n    songs\r\n  };\r\n};\r\n\r\nexport const fetchRecentlyPlayedError = () => {\r\n  return {\r\n    type: 'FETCH_RECENTLY_PLAYED_ERROR'\r\n  };\r\n};\r\n\r\nexport const fetchRecentlyPlayed = (accessToken) => {\r\n  return dispatch => {\r\n    const request = new Request(`https://api.spotify.com/v1/me/player/recently-played`, {\r\n      headers: new Headers({\r\n        'Authorization': 'Bearer ' + accessToken\r\n      })\r\n    });\r\n\r\n    dispatch(fetchRecentlyPlayedPending());\r\n\r\n    fetch(request).then(res => {\r\n      return res.json();\r\n    }).then(res => {\r\n      //remove duplicates from recently played\r\n      res.items = uniqBy(res.items, (item) => {\r\n        return item.track.id;\r\n      });\r\n      dispatch(fetchRecentlyPlayedSuccess(res.items));\r\n    }).catch(err => {\r\n      dispatch(fetchRecentlyPlayedError(err));\r\n    });\r\n  };\r\n};\r\n\r\nexport const playSong = (song) => {\r\n  return {\r\n    type: 'PLAY_SONG',\r\n    song\r\n  };\r\n};\r\n\r\nexport const stopSong = () => {\r\n  return {\r\n    type: 'STOP_SONG'\r\n  };\r\n};\r\n\r\nexport const pauseSong = () => {\r\n  return {\r\n    type: 'PAUSE_SONG'\r\n  };\r\n};\r\n\r\nexport const resumeSong = () => {\r\n  return {\r\n    type: 'RESUME_SONG'\r\n  };\r\n};\r\n\r\nexport const increaseSongTime = (time) => {\r\n  return {\r\n    type: 'INCREASE_SONG_TIME',\r\n    time\r\n  };\r\n};\r\n\r\nexport const updateViewType = (view) => {\r\n  return {\r\n    type: 'UPDATE_VIEW_TYPE',\r\n    view\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}