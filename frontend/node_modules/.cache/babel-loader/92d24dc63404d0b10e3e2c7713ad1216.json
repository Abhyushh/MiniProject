{"ast":null,"code":"import uniqBy from 'lodash/uniqBy';\nexport const fetchPlaylistMenuPending = () => {\n  return {\n    type: 'FETCH_PLAYLIST_MENU_PENDING'\n  };\n};\nexport const fetchPlaylistMenuSuccess = playlists => {\n  return {\n    type: 'FETCH_PLAYLIST_MENU_SUCCESS',\n    playlists\n  };\n};\nexport const fetchPlaylistMenuError = () => {\n  return {\n    type: 'FETCH_PLAYLIST_MENU_ERROR'\n  };\n};\nexport const addPlaylistItem = playlist => {\n  return {\n    type: 'ADD_PLAYLIST_ITEM',\n    playlist\n  };\n};\nexport const fetchPlaylistsMenu = (userId, accessToken) => {\n  return dispatch => {\n    const request = new Request(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n      headers: new Headers({\n        'Authorization': 'Bearer ' + accessToken\n      })\n    });\n    dispatch(fetchPlaylistMenuPending());\n    fetch(request).then(res => {\n      if (res.statusText === \"Unauthorized\") {\n        window.location.href = './';\n      }\n\n      return res.json();\n    }).then(res => {\n      dispatch(fetchPlaylistMenuSuccess(res.items));\n    }).catch(err => {\n      dispatch(fetchPlaylistMenuError(err));\n    });\n  };\n};\nexport const fetchPlaylistSongsPending = () => {\n  return {\n    type: 'FETCH_PLAYLIST_SONGS_PENDING'\n  };\n};\nexport const fetchPlaylistSongsSuccess = songs => {\n  return {\n    type: 'FETCH_PLAYLIST_SONGS_SUCCESS',\n    songs\n  };\n};\nexport const fetchPlaylistSongsError = () => {\n  return {\n    type: 'FETCH_PLAYLIST_SONGS_ERROR'\n  };\n};\nexport const fetchPlaylistSongs = (userId, playlistId, accessToken) => {\n  return dispatch => {\n    const request = new Request(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n      headers: new Headers({\n        'Authorization': 'Bearer ' + accessToken\n      })\n    });\n    dispatch(fetchPlaylistSongsPending());\n    fetch(request).then(res => {\n      return res.json();\n    }).then(res => {\n      //remove duplicate tracks\n      res.items = uniqBy(res.items, item => {\n        return item.track.id;\n      });\n      dispatch(fetchPlaylistSongsSuccess(res.items));\n    }).catch(err => {\n      dispatch(fetchPlaylistSongsError(err));\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Akshat Bhatia/Desktop/MiniProject/frontend/src/actions/playlistActions.js"],"names":["uniqBy","fetchPlaylistMenuPending","type","fetchPlaylistMenuSuccess","playlists","fetchPlaylistMenuError","addPlaylistItem","playlist","fetchPlaylistsMenu","userId","accessToken","dispatch","request","Request","headers","Headers","fetch","then","res","statusText","window","location","href","json","items","catch","err","fetchPlaylistSongsPending","fetchPlaylistSongsSuccess","songs","fetchPlaylistSongsError","fetchPlaylistSongs","playlistId","item","track","id"],"mappings":"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","sourcesContent":["import uniqBy from 'lodash/uniqBy';\r\n\r\nexport const fetchPlaylistMenuPending = () => {\r\n  return {\r\n    type: 'FETCH_PLAYLIST_MENU_PENDING'\r\n  };\r\n};\r\n\r\nexport const fetchPlaylistMenuSuccess = (playlists) => {\r\n  return {\r\n    type: 'FETCH_PLAYLIST_MENU_SUCCESS',\r\n    playlists\r\n  };\r\n};\r\n\r\nexport const fetchPlaylistMenuError = () => {\r\n  return {\r\n    type: 'FETCH_PLAYLIST_MENU_ERROR'\r\n  };\r\n};\r\n\r\nexport const addPlaylistItem = (playlist) => {\r\n  return {\r\n    type: 'ADD_PLAYLIST_ITEM',\r\n    playlist\r\n  };\r\n};\r\n\r\nexport const fetchPlaylistsMenu = (userId, accessToken) => {\r\n  return dispatch => {\r\n    const request = new Request(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n      headers: new Headers({\r\n        'Authorization': 'Bearer ' + accessToken\r\n      })\r\n    });\r\n\r\n    dispatch(fetchPlaylistMenuPending());\r\n\r\n    fetch(request).then(res => {\r\n      if(res.statusText === \"Unauthorized\") {\r\n        window.location.href = './';\r\n      }\r\n      return res.json();\r\n    }).then(res => {\r\n      dispatch(fetchPlaylistMenuSuccess(res.items));\r\n    }).catch(err => {\r\n      dispatch(fetchPlaylistMenuError(err));\r\n    });\r\n  };\r\n};\r\n\r\n\r\nexport const fetchPlaylistSongsPending = () => {\r\n  return {\r\n    type: 'FETCH_PLAYLIST_SONGS_PENDING'\r\n  };\r\n};\r\n\r\nexport const fetchPlaylistSongsSuccess = (songs) => {\r\n  return {\r\n    type: 'FETCH_PLAYLIST_SONGS_SUCCESS',\r\n    songs\r\n  };\r\n};\r\n\r\nexport const fetchPlaylistSongsError = () => {\r\n  return {\r\n    type: 'FETCH_PLAYLIST_SONGS_ERROR'\r\n  };\r\n};\r\n\r\nexport const fetchPlaylistSongs = (userId, playlistId, accessToken) => {\r\n  return dispatch => {\r\n    const request = new Request(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n      headers: new Headers({\r\n        'Authorization': 'Bearer ' + accessToken\r\n      })\r\n    });\r\n\r\n    dispatch(fetchPlaylistSongsPending());\r\n\r\n    fetch(request).then(res => {\r\n      return res.json();\r\n    }).then(res => {\r\n      //remove duplicate tracks\r\n      res.items = uniqBy(res.items, (item) => {\r\n        return item.track.id;\r\n      });\r\n      dispatch(fetchPlaylistSongsSuccess(res.items));\r\n    }).catch(err => {\r\n      dispatch(fetchPlaylistSongsError(err));\r\n    });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}